const dungeons = require('./lib/dungeon.json');

let handler = async (m, { conn, usedPrefix, command }) => {
  let users = global.db.data.users;
  let sender = m.sender;

  if (!users[sender].organization) {
    throw 'Kamu belum memiliki organisasi';
  }

  let orgData = users[sender].organization;

  // Mendapatkan argumen dari pesan
  let dungeonIndex = parseInt(m.text.split(' ')[1]);
  if (isNaN(dungeonIndex) || dungeonIndex < 1 || dungeonIndex > dungeons.length) {
    throw 'Silakan masukkan nomor dungeon yang ingin kamu jelajahi';
  }

  let dungeonData = dungeons[dungeonIndex - 1];

  // Mendapatkan statistik dungeon
  let dungeonName = dungeonData.name;
  let bossName = dungeonData.boss;
  let dungeonFounder = dungeonData.founder;
  let conqueredFloor = dungeonData.conqueredFloor;
  let maxFloor = dungeonData.maxFloor;
  let currentFloor = conqueredFloor + 1;

  // Mendapatkan jumlah monster pada lantai pengguna berada atau lantai sebelumnya
  let previousFloor = currentFloor - 1;
  let monsterCount = previousFloor >= 0 ? dungeonData.floors[previousFloor].monsters : 0;

  // Menghitung peluang kemenangan berdasarkan total level organisasi dan jumlah pengikut
  let orgTotalLevel = orgData.followers.reduce(
    (total, follower) => total + follower.level,
    0
  );
  let followerCount = orgData.followers.length;
  let winChance = orgTotalLevel / (orgTotalLevel + followerCount);

  // Menghitung peluang gagal berdasarkan lantai dungeon yang ingin ditaklukkan
  let failChance = currentFloor * 0.02;

  // Menentukan apakah pengguna berhasil menjelajahi dungeon
  let isExplorationSuccessful = Math.random() < winChance && Math.random() >= failChance;

  let message = `[ EKSPEDISI DUNGEON ]\n\n`;
  message += `Dungeon yang Dipilih: ${dungeonName}\n`;
  message += `Bos Lantai Ini: ${bossName}\n`;
  message += `Penemu Dungeon: ${dungeonFounder}\n`;
  message += `Dungeon Ditaklukkan Hingga Lantai: ${conqueredFloor}\n`;
  message += `Lantai Maksimal Dungeon: ${maxFloor}\n`;
  message += `Lantai Saat Ini: ${currentFloor}\n`;
  message += `Jumlah Monster di Lantai Ini: ${monsterCount}\n`;
  message += `Peluang Kemenangan: ${(winChance * 100).toFixed(2)}%\n`;
  message += `Peluang Gagal: ${(failChance * 100).toFixed(2)}%\n\n`;

  if (isExplorationSuccessful) {
    message += `Selamat! Kamu berhasil menjelajahi lantai ${currentFloor} dungeon ini!\n`;

    // Mendapatkan jumlah pengikut yang mati (tidak lebih dari 10% dari total pengikut)
    let destroyedFollowers = Math.ceil(followerCount * 0.1);

    // Mendapatkan exp dan money acak antara 0-200000 (ditambah bonus dari pengikut dan lantai)
    let obtainedExp = Math.floor(Math.random() * 200001 * (1 + followerCount / 100) * (1 + currentFloor / 100));
    let obtainedMoney = Math.floor(Math.random() * 200001 * (1 + followerCount / 100) * (1 + currentFloor / 100));

    // Mengurangi health dan stamina pengguna secara acak antara 0-500
    let healthDecrease = Math.floor(Math.random() * 501);
    let staminaDecrease = Math.floor(Math.random() * 501);

    // Memperbarui statistik pengguna
    users[sender].exp += obtainedExp;
    users[sender].money += obtainedMoney;
    users[sender].health -= healthDecrease;
    users[sender].stamina -= staminaDecrease;

    // Memperbarui statistik organisasi pengguna
    orgData.money += obtainedMoney;

    // Mengecek apakah semua monster telah dikalahkan pada lantai ini
    let isFloorCleared = destroyedFollowers >= monsterCount;

    if (isFloorCleared) {
      message += `Seluruh monster di lantai ${currentFloor} telah dikalahkan!\n`;
      message += `Exp yang Diperoleh: ${obtainedExp}\n`;
      message += `Money yang Diperoleh: ${obtainedMoney}\n`;
      message += `Health Pengurangan: ${healthDecrease}\n`;
      message += `Stamina Pengurangan: ${staminaDecrease}\n`;

      // Memperbarui statistik dungeon
      dungeonData.conqueredFloor++;

      // Mengurangi pengikut organisasi yang mati (tidak lebih dari 10% dari total pengikut)
      if (destroyedFollowers > 0) {
        orgData.followers.splice(0, destroyedFollowers);
        message += `Pengikut Organisasi yang Mati: ${destroyedFollowers}\n`;
      }

      // Mengecek apakah dungeon telah ditaklukkan sepenuhnya
      if (dungeonData.conqueredFloor === maxFloor) {
        message += `Selamat! Kamu telah berhasil menaklukkan dungeon ini secara keseluruhan!\n`;
      }
    } else {
      message += `Kamu belum berhasil mengalahkan semua monster di lantai ${currentFloor}\n`;
      message += `Teruslah melawan monster untuk mencapai bos lantai ini!\n`;
    }
  } else {
    message += `Sayang sekali, kamu gagal menjelajahi lantai ${currentFloor} dungeon ini\n`;

    // Mengurangi health dan stamina pengguna secara acak antara 0-1000
    let healthDecrease = Math.floor(Math.random() * 1001);
    let staminaDecrease = Math.floor(Math.random() * 1001);

    // Memperbarui statistik pengguna
    users[sender].health -= healthDecrease;
    users[sender].stamina -= staminaDecrease;

    // Mengurangi pengikut organisasi yang mati (tidak lebih dari 50% dari total pengikut)
    let maxDestroyedFollowers = Math.floor(followerCount * 0.5);
    let destroyedFollowers = Math.floor(Math.random() * (maxDestroyedFollowers + 1));

    if (destroyedFollowers > 0) {
      orgData.followers.splice(0, destroyedFollowers);
      message += `Pengikut Organisasi yang Mati: ${destroyedFollowers}\n`;
    }
  }

  conn.reply(m.chat, message, m);
};

handler.help = ['explore <nomor_dungeon>'];
handler.tags = ['rpg'];
handler.command = /^explore$/i;
handler.group = true;

export default handler;
